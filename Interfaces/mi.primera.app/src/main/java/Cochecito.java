
import java.awt.List;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.FileWriter;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import java.util.Map;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.io.FileWriter;



/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author Castillo
 */
public class Cochecito extends javax.swing.JFrame {

    /**
     * Creates new form Cochecito
     */
    public Cochecito() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        textfieldModelo = new javax.swing.JTextField();
        textfieldPotencia = new javax.swing.JTextField();
        textfieldAutonomia = new javax.swing.JTextField();
        textfieldPrecio = new javax.swing.JTextField();
        textfieldID = new javax.swing.JTextField();
        labelID = new javax.swing.JLabel();
        labelModelo = new javax.swing.JLabel();
        labelAutonomia = new javax.swing.JLabel();
        labelPotencia = new javax.swing.JLabel();
        labelPrecio = new javax.swing.JLabel();
        buttonCreate = new javax.swing.JButton();
        buttonRead = new javax.swing.JButton();
        buttonUpdate = new javax.swing.JButton();
        buttonDelete = new javax.swing.JButton();
        buttonClean = new javax.swing.JButton();
        buttonExportar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableTesla = new javax.swing.JTable();
        botonImportar = new javax.swing.JButton();
        botonExportar2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        textfieldModelo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textfieldModeloActionPerformed(evt);
            }
        });

        labelID.setText("ID");

        labelModelo.setText("Modelo");

        labelAutonomia.setText("Autonomia");

        labelPotencia.setText("Potencia");

        labelPrecio.setText("Precio");

        buttonCreate.setText("Create");
        buttonCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCreateActionPerformed(evt);
            }
        });

        buttonRead.setText("Read");
        buttonRead.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonReadActionPerformed(evt);
            }
        });

        buttonUpdate.setText("Update");
        buttonUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonUpdateActionPerformed(evt);
            }
        });

        buttonDelete.setText("Delete");
        buttonDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonDeleteActionPerformed(evt);
            }
        });

        buttonClean.setText("Clean");
        buttonClean.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCleanActionPerformed(evt);
            }
        });

        buttonExportar.setText("Exportar CSV");
        buttonExportar.setActionCommand("");
        buttonExportar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonExportarActionPerformed(evt);
            }
        });

        tableTesla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Modelo", "Potencia", "Autonomia", "Precio"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tableTesla);

        botonImportar.setText("Importar CSV");
        botonImportar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonImportarActionPerformed(evt);
            }
        });

        botonExportar2.setText("Exportar JSON");
        botonExportar2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonExportar2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(labelID)
                            .addComponent(labelAutonomia)
                            .addComponent(labelPrecio)
                            .addComponent(labelModelo)
                            .addComponent(labelPotencia))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(textfieldID, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(textfieldModelo, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(buttonRead, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(buttonCreate, javax.swing.GroupLayout.DEFAULT_SIZE, 79, Short.MAX_VALUE))
                                .addGap(32, 32, 32))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(textfieldPotencia, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(buttonUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(textfieldAutonomia, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(buttonDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(textfieldPrecio, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(44, 44, 44)
                                        .addComponent(buttonClean, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(40, 40, 40)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(buttonExportar, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(botonImportar, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(69, 69, 69))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(botonExportar2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(57, 57, 57)))))
                .addGap(27, 27, 27))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(textfieldID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(buttonCreate)
                            .addComponent(labelID)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(buttonExportar, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textfieldModelo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelModelo)
                    .addComponent(buttonRead)
                    .addComponent(botonImportar, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textfieldPotencia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelPotencia)
                    .addComponent(buttonUpdate))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textfieldAutonomia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelAutonomia)
                    .addComponent(buttonDelete))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textfieldPrecio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelPrecio)
                    .addComponent(buttonClean)
                    .addComponent(botonExportar2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 63, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 340, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void textfieldModeloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textfieldModeloActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textfieldModeloActionPerformed

    private void buttonReadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonReadActionPerformed
        DefaultTableModel modeloDatos = (DefaultTableModel)tableTesla.getModel();
        try {
            String url="jdbc:mysql://localhost:3306/tesla";
            Connection con = (Connection)DriverManager.getConnection(url, "root", "");
           
            PreparedStatement pst = null;
            ResultSet rs;
            pst=con.prepareStatement("select * from coches");
           
            rs=pst.executeQuery("select * from coches");
           
            while(rs.next()){
                String id = rs.getString("id");
                String modelo = rs.getString("modelo");
                String potencia = rs.getString("potencia");
                String autonomia = rs.getString("autonomia");
                String precio = rs.getString("precio");
                modeloDatos.addRow(new Object[]{id,modelo,potencia,autonomia,precio});
            }
        } catch (Exception e){
            System.err.println("NO FUNCIONA");
        }

    }//GEN-LAST:event_buttonReadActionPerformed

    private void buttonExportarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonExportarActionPerformed
        try {
    // Establece la conexión a la base de datos
    Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/tesla", "root", "");

    // Crea la consulta SQL
    String sql = "SELECT id, modelo, potencia, autonomia, precio FROM coches";
    PreparedStatement ps = con.prepareStatement(sql);
    ResultSet rs = ps.executeQuery();

    // Crea un FileWriter para escribir en un archivo CSV
    FileWriter writer = new FileWriter("datos.csv");

    // Escribe la cabecera (nombres de las columnas)
    writer.append("ID,Modelo,Potencia,Autonomia,Precio");
    writer.append("\n");

    // Itera sobre los resultados y escribe cada fila en el CSV
    while (rs.next()) {
        writer.append(rs.getString("id"));
        writer.append(",");
        writer.append(rs.getString("modelo"));
        writer.append(",");
        writer.append(rs.getString("potencia"));
        writer.append(",");
        writer.append(rs.getString("autonomia"));
        writer.append(",");
        writer.append(rs.getString("precio"));
        writer.append("\n");
    }

    // Cierra el FileWriter
    writer.flush();
    writer.close();

    // Cierra la conexión a la base de datos
    con.close();
} catch (Exception e) {
    e.printStackTrace();
}

    }//GEN-LAST:event_buttonExportarActionPerformed

    private void buttonCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCreateActionPerformed
    try {
            String url="jdbc:mysql://localhost:3306/tesla";
            try (Connection con = (Connection)DriverManager.getConnection(url, "root", "")) {
           
            String sql = "INSERT INTO coches(modelo,potencia,autonomia,precio) VALUES (?,?,?,?)";
            PreparedStatement ps = con.prepareStatement(sql);
            ps.setString(1, textfieldModelo.getText());
            ps.setInt(2, Integer.parseInt(textfieldPotencia.getText()));
            ps.setInt(3, Integer.parseInt(textfieldAutonomia.getText()));
            ps.setInt(4, Integer.parseInt(textfieldPrecio.getText()));
           
            int filas = ps.executeUpdate();
                System.out.println("Filas afectadas " + filas);
               
            con.close();
            }
         
        } catch (Exception e){
            System.out.print("No fufa. " + e.getMessage());
        }

    }//GEN-LAST:event_buttonCreateActionPerformed

    private void buttonDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonDeleteActionPerformed
       // Agrega esto en tu constructor o en un método de inicialización
buttonDelete.addActionListener(new ActionListener() {
    @Override
    public void actionPerformed(ActionEvent e) {
        int selectedRow = tableTesla.getSelectedRow();
        if (selectedRow != -1) {
            String id = tableTesla.getValueAt(selectedRow, 0).toString();
            try {
                String url = "jdbc:mysql://localhost:3306/tesla";
                try (Connection con = DriverManager.getConnection(url, "root", "")) {
                    String sql = "DELETE FROM coches WHERE id = ?";
                    PreparedStatement ps = con.prepareStatement(sql);
                    ps.setInt(1, Integer.parseInt(id));
                    int filas = ps.executeUpdate();
                    System.out.println("Filas afectadas: " + filas);
                    DefaultTableModel model = (DefaultTableModel) tableTesla.getModel();
                    model.removeRow(selectedRow);
                }
            } catch (Exception ex) {
                System.out.println("Error: " + ex.getMessage());
            }
        }
    }
});

    }//GEN-LAST:event_buttonDeleteActionPerformed

    private void buttonCleanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCleanActionPerformed
        buttonClean.addActionListener(new ActionListener() {
    @Override
    public void actionPerformed(ActionEvent e) {
        DefaultTableModel model = (DefaultTableModel) tableTesla.getModel();
        model.setRowCount(0);
    }
});

    }//GEN-LAST:event_buttonCleanActionPerformed

    private void buttonUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonUpdateActionPerformed
     buttonUpdate.addActionListener(new ActionListener() {
    @Override
    public void actionPerformed(ActionEvent e) {
        try {
            String url = "jdbc:mysql://localhost:3306/tesla";
            Connection con = DriverManager.getConnection(url, "root", "");

            String modelo = textfieldModelo.getText();

            // Verificar si el modelo ya existe
            PreparedStatement verificacion = con.prepareStatement("SELECT * FROM coches WHERE modelo = ?");
            verificacion.setString(1, modelo);
            ResultSet rs = verificacion.executeQuery();

            if (rs.next()) {
                // El modelo existe, realizar actualización
                String sql = "UPDATE coches SET potencia=?, autonomia=?, precio=? WHERE modelo=?";
                PreparedStatement ps = con.prepareStatement(sql);

                ps.setInt(1, Integer.parseInt(textfieldPotencia.getText()));
                ps.setInt(2, Integer.parseInt(textfieldAutonomia.getText()));
                ps.setInt(3, Integer.parseInt(textfieldPrecio.getText()));
                ps.setString(4, modelo);

                int filas = ps.executeUpdate();
                System.out.println("Filas afectadas " + filas);
            } else {
                System.out.println("El modelo no se encontró en la base de datos.");
            }

            con.close();
        } catch (Exception ex) {
            System.out.print("No funciona. " + ex.getMessage());
        }
    }
});
   
    }//GEN-LAST:event_buttonUpdateActionPerformed

    private void botonImportarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonImportarActionPerformed
                                                 
    try {
        String url = "jdbc:mysql://localhost:3306/tesla";
        Connection con = DriverManager.getConnection(url, "root", "");

        BufferedReader br = new BufferedReader(new FileReader("archivo.csv"));
        String linea;
        boolean primeraLinea = true; //flag for id
        while ((linea = br.readLine()) != null) {
            if (primeraLinea) {
                primeraLinea= false;
                continue; //saltar linea para evitar for imput string 
            }
            String[] campos = linea.split(",");
            
            String modelo = campos[0];
            int potencia = Integer.parseInt(campos[1]);
            int autonomia = Integer.parseInt(campos[2]);
            int precio = Integer.parseInt(campos[3]);

            String sql = "INSERT INTO coches(modelo, potencia, autonomia, precio) VALUES (?, ?, ?, ?)";
            PreparedStatement ps = con.prepareStatement(sql);
            ps.setString(1, modelo);
            ps.setInt(2, potencia);
            ps.setInt(3, autonomia);
            ps.setInt(4, precio);

            int filas = ps.executeUpdate();
            System.out.println("Filas afectadas " + filas);
        }

        br.close();
        con.close();
    } catch (Exception ex) {
        System.out.println("Error: " + ex.getMessage());
    }


    }//GEN-LAST:event_botonImportarActionPerformed

    private void botonExportar2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonExportar2ActionPerformed
 

    }//GEN-LAST:event_botonExportar2ActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botonExportar2;
    private javax.swing.JButton botonImportar;
    private javax.swing.JButton buttonClean;
    private javax.swing.JButton buttonCreate;
    private javax.swing.JButton buttonDelete;
    private javax.swing.JButton buttonExportar;
    private javax.swing.JButton buttonRead;
    private javax.swing.JButton buttonUpdate;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel labelAutonomia;
    private javax.swing.JLabel labelID;
    private javax.swing.JLabel labelModelo;
    private javax.swing.JLabel labelPotencia;
    private javax.swing.JLabel labelPrecio;
    private javax.swing.JTable tableTesla;
    private javax.swing.JTextField textfieldAutonomia;
    private javax.swing.JTextField textfieldID;
    private javax.swing.JTextField textfieldModelo;
    private javax.swing.JTextField textfieldPotencia;
    private javax.swing.JTextField textfieldPrecio;
    // End of variables declaration//GEN-END:variables
}
